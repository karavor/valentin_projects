программа antiaff_antihairpin_gen_smart генерирует олиг длиной olig_length на основании заданных oligs_nmb олигов
базу нежелательных и базу разрешенных паттернов длины pattern_length (оптимально: 4 нуклеотида)
затем она, используя эти базы, генерирует случайным образом олиг (если initil_olig не задан и если натуральный
параметр rndm_seed не задан, т.е. стоит '-', тогда каждый раз (max_loop_nmb раз) будет генерироваться новый олиг,
иначе будет сгенерирован один единственный олиг). При одном и том же заданном rndm_seed будет воспроизводиться один и тот же результат.
Очередной сгенерированный олиг по замыслу

1) не будет иметь сильно низкую dG
2) не будет аффинным сам к себе и к заданным олигам
3) олиги, комплементарные к его левой и правой половинам будут обладать св-ствами 1) и 2),
   а также будут образовывать с ним достаточно прочную связь

все эти данные присутствуют в файле AAGS_result (он постоянно переписывается и его
можно использовать для отладки программы / анализа некорректного ввода входных данных)

Соответственно, если очередной сгенерированный олиг (параметры записаны в в файле critical_prmtrs)
	1) имеет dG > crit_dG
	2) имеет аффинность к олигам из AAGS_input меньше crit_cross_aff
	3) (при заданном double_func_parts_flag = 1) олиги, комплементарные к его правой и левой половинам
	   имеют dG > crit_dG_c
	   и образуют с данным олигом комплексы с dG < crit_dG_cmplx
	   + аффинность олига, комплементарного к правой части, к левой части и наоборот меньше crit_c_cross_aff

	   при заданном double_func_parts_flag = 0 смотрим соответствие тем же парамметрам, но просто
	   комплементарного олига к данному, а на crit_c_cross_aff забиваем

тогда этот олиг будет записан в AAGS_caller_stat вместе со своим rndm_seed

ПРИМЕЧАНИЯ:

1) при входных данных:

AAGS_input:
	DNA_flag: 1
	rndm_seed: -
	olig_length: 12
	initial_olig: -
	pattern_length: 4
	oligs_nmb: 5
	1)N: CATGAGGGGCGGGGACGCCGCCTGTCT
	2)a: CCAACCCATGATTACAGTGAGCACGACAGA
	3)A: TCTGTCGTGCTCACTGTAATCATGGGTTGG
	4)A1: AATCATGGGTTGG
	5)A2: CCTGTCGTGCTCA

critical_prmtrs:
	max_loop_nmb: 100
	double_func_parts_flag: 0
	crit_dG: -4
	crit_dG_c: -4
	crit_dG_cmplx: -5
	crit_cross_aff: 1
	crit_c_cross_aff: 1

Программа работает 20 секунд.

2) Так как при каждой итерации программа генерит случайный олиг, то её результаты каждый раз будут разными